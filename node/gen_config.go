// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package node

import (
	"github.com/pioplat/pioplat-core/log"
	"github.com/pioplat/pioplat-core/p2p"
)

// MarshalTOML marshals as TOML.
func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		Name                  string `toml:"-"`
		UserIdent             string `toml:",omitempty"`
		Version               string `toml:"-"`
		DataDir               string
		P2P                   p2p.Config
		KeyStoreDir           string     `toml:",omitempty"`
		ExternalSigner        string     `toml:",omitempty"`
		UseLightweightKDF     bool       `toml:",omitempty"`
		InsecureUnlockAllowed bool       `toml:",omitempty"`
		DirectBroadcast       bool       `toml:",omitempty"`
		DisableSnapProtocol   bool       `toml:",omitempty"`
		RangeLimit            bool       `toml:",omitempty"`
		Logger                log.Logger `toml:",omitempty"`
		LogConfig             *LogConfig `toml:",omitempty"`
		AllowUnprotectedTxs   bool       `toml:",omitempty"`
	}
	var enc Config
	enc.Name = c.Name
	enc.UserIdent = c.UserIdent
	enc.Version = c.Version
	enc.DataDir = c.DataDir
	enc.P2P = c.P2P
	enc.KeyStoreDir = c.KeyStoreDir
	enc.ExternalSigner = c.ExternalSigner
	enc.UseLightweightKDF = c.UseLightweightKDF
	enc.InsecureUnlockAllowed = c.InsecureUnlockAllowed
	enc.DirectBroadcast = c.DirectBroadcast
	enc.DisableSnapProtocol = c.DisableSnapProtocol
	enc.RangeLimit = c.RangeLimit
	enc.Logger = c.Logger
	enc.LogConfig = c.LogConfig
	enc.AllowUnprotectedTxs = c.AllowUnprotectedTxs
	return &enc, nil
}

// UnmarshalTOML unmarshals from TOML.
func (c *Config) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type Config struct {
		Name                  *string `toml:"-"`
		UserIdent             *string `toml:",omitempty"`
		Version               *string `toml:"-"`
		DataDir               *string
		P2P                   *p2p.Config
		KeyStoreDir           *string    `toml:",omitempty"`
		ExternalSigner        *string    `toml:",omitempty"`
		UseLightweightKDF     *bool      `toml:",omitempty"`
		InsecureUnlockAllowed *bool      `toml:",omitempty"`
		DirectBroadcast       *bool      `toml:",omitempty"`
		DisableSnapProtocol   *bool      `toml:",omitempty"`
		RangeLimit            *bool      `toml:",omitempty"`
		Logger                log.Logger `toml:",omitempty"`
		LogConfig             *LogConfig `toml:",omitempty"`
		AllowUnprotectedTxs   *bool      `toml:",omitempty"`
	}
	var dec Config
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Name != nil {
		c.Name = *dec.Name
	}
	if dec.UserIdent != nil {
		c.UserIdent = *dec.UserIdent
	}
	if dec.Version != nil {
		c.Version = *dec.Version
	}
	if dec.DataDir != nil {
		c.DataDir = *dec.DataDir
	}
	if dec.P2P != nil {
		c.P2P = *dec.P2P
	}
	if dec.KeyStoreDir != nil {
		c.KeyStoreDir = *dec.KeyStoreDir
	}
	if dec.ExternalSigner != nil {
		c.ExternalSigner = *dec.ExternalSigner
	}
	if dec.UseLightweightKDF != nil {
		c.UseLightweightKDF = *dec.UseLightweightKDF
	}
	if dec.InsecureUnlockAllowed != nil {
		c.InsecureUnlockAllowed = *dec.InsecureUnlockAllowed
	}
	if dec.DirectBroadcast != nil {
		c.DirectBroadcast = *dec.DirectBroadcast
	}
	if dec.DisableSnapProtocol != nil {
		c.DisableSnapProtocol = *dec.DisableSnapProtocol
	}
	if dec.RangeLimit != nil {
		c.RangeLimit = *dec.RangeLimit
	}
	if dec.Logger != nil {
		c.Logger = dec.Logger
	}
	if dec.LogConfig != nil {
		c.LogConfig = dec.LogConfig
	}
	if dec.AllowUnprotectedTxs != nil {
		c.AllowUnprotectedTxs = *dec.AllowUnprotectedTxs
	}
	return nil
}
